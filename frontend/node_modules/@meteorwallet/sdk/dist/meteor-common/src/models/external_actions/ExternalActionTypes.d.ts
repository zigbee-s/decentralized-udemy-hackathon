import { z } from "zod";
import { ENearNetwork } from "../../types/NearCommonTypes";
import { KeyPair, transactions, utils } from "near-api-js";
import { ZO_MeteorSignInAction_AllMethods, ZO_MeteorSignInAction_SelectedMethods } from "./ExternalActionValidation";
import { FinalExecutionOutcome } from "near-api-js/lib/providers";
import { PartialBy } from "../../utils/typescript/SpecialTypes";
import { EMeteorActionErrorTag } from "./ExternalActionErrorMessages";
export interface IRejectReason {
    message: string;
    endTags: (EMeteorActionErrorTag | string)[];
}
export declare class MeteorActionError extends Error {
    _reason: IRejectReason;
    cause?: Error;
    constructor(reason: PartialBy<IRejectReason, "message">, previousError?: Error);
}
export declare enum EWalletExternalActionType {
    login = "login",
    sign = "sign",
    logout = "logout",
    verify_owner = "verify_owner"
}
export declare enum EMeteorWalletSignInType {
    ALL_METHODS = "ALL_METHODS",
    SELECTED_METHODS = "SELECTED_METHODS",
    FULL_ACCESS = "FULL_ACCESS"
}
export declare enum EWalletExternalAction_SignIn_AccessType {
    FULL_ACCESS = "fullAccess",
    LIMITED_ACCESS = "limitedAccess"
}
export declare enum EWalletExternalActionStatus {
    UNCONFIRMED = "UNCONFIRMED",
    PENDING = "PENDING",
    SUCCESS = "SUCCESS",
    FAILURE = "FAILURE"
}
export declare type TMeteorWalletExternalAction_SignIn_AllMethods = z.infer<typeof ZO_MeteorSignInAction_AllMethods>;
export declare type TMeteorWalletExternalAction_SignIn_SelectedMethods = z.infer<typeof ZO_MeteorSignInAction_SelectedMethods>;
export declare type TMeteorWalletExternalAction_SignIn_Data = TMeteorWalletExternalAction_SignIn_AllMethods | TMeteorWalletExternalAction_SignIn_SelectedMethods;
export interface IOMeteorWalletSdk_RequestSignIn_Inputs {
    keyPair?: KeyPair;
    type: EMeteorWalletSignInType;
    methods?: string[];
    contract_id: string;
}
export interface IOMeteorWalletSdkAccount_SignAndSendTransaction_Input {
    receiverId: string;
    actions: transactions.Action[];
}
export interface IWithCallbackUrl {
    callback_url: string;
}
export interface IOMeteorWalletSdk_SignIn_Output {
    accessKey: KeyPair;
    accountId: string;
}
export interface IOWalletExternalAction_PostMessage_SignIn_Output {
    accountId: string;
    allKeys: string[];
}
export interface IOWalletExternalAction_VerifyOwner_Input {
    message: string;
    accountId?: string;
}
export interface IOWalletExternalAction_VerifyOwner_Output {
    accountId: string;
    message: string;
    blockId: string;
    publicKey: string;
    signature: string;
    keyType: utils.key_pair.KeyType;
}
export interface IOWalletExternalAction_PostMessage_SignTransactions_Input {
    transactions: string;
}
export interface ITransactionHashOutput {
    hash: string;
    nonceString: string;
}
export interface IOWalletExternalAction_PostMessage_SignTransactions_Output {
    executionOutcomes: FinalExecutionOutcome[];
}
/**
 * Information to send NEAR wallet for signing transactions and redirecting the browser back to the calling application
 */
export interface IORequestSignTransactionsRedirect_Inputs {
    /** list of transactions to sign */
    transactions: transactions.Transaction[];
    /** url NEAR Wallet will redirect to after transaction signing is complete */
    callback_url?: string;
    /** meta information NEAR Wallet will send back to the application. `meta` will be attached to the `callbackUrl` as a url search param */
    meta?: string;
}
export interface IORequestSignTransactions_Inputs {
    /** list of transactions to sign */
    transactions: transactions.Transaction[];
}
export interface IMeteorWalletExternalAction_SignTransactions_Data {
    status: EWalletExternalActionStatus;
    transactions: transactions.Transaction[];
}
export interface IOWalletExternalLinkedContract {
    contract_id: string;
    public_key: string;
}
export interface IMeteorWalletExternalAction_Logout_Data {
    accountId: string;
    contractInfo: IOWalletExternalLinkedContract;
}
export declare type TMeteorComListener<D extends any> = (data: D) => void;
export interface IMeteorComInjectedObject {
    sendMessageData: (data: any) => void;
    addMessageDataListener: (listener: TMeteorComListener<any>) => void;
}
export declare enum EMeteorWalletExternalActionSource {
    website_callback = "wcb",
    website_post_message = "wpm",
    extension_injected = "ext"
}
export declare enum EExternalActionConnectionStatus {
    initializing = "initializing",
    connected = "connected",
    attempting_reconnect = "attempting_reconnect",
    disconnected = "disconnected",
    closed_success = "closed_success",
    closed_fail = "closed_fail",
    closed_window = "closed_window"
}
interface IMeteorWalletExternalAction_Base {
    uid: string;
    connectionStatus: EExternalActionConnectionStatus;
    source: EMeteorWalletExternalActionSource;
    referrerHost?: string;
    referrerOrigin?: string;
    referrerFull?: string;
    network: ENearNetwork;
}
export interface IMeteorWalletExternalAction_Login extends IMeteorWalletExternalAction_Base {
    actionType: EWalletExternalActionType.login;
    inputs: TMeteorWalletExternalAction_SignIn_Data;
}
export interface IMeteorWalletExternalAction_SignTransaction extends IMeteorWalletExternalAction_Base {
    actionType: EWalletExternalActionType.sign;
    inputs: IMeteorWalletExternalAction_SignTransactions_Data;
    callbackUrl?: string;
    meta?: string;
}
export interface IMeteorWalletExternalAction_Logout extends IMeteorWalletExternalAction_Base {
    actionType: EWalletExternalActionType.logout;
    inputs: IMeteorWalletExternalAction_Logout_Data;
}
export interface IMeteorWalletExternalAction_VerifyOwner extends IMeteorWalletExternalAction_Base {
    actionType: EWalletExternalActionType.verify_owner;
    inputs: IOWalletExternalAction_VerifyOwner_Input;
}
export declare type TMeteorWalletExternalAction = IMeteorWalletExternalAction_Login | IMeteorWalletExternalAction_SignTransaction | IMeteorWalletExternalAction_Logout | IMeteorWalletExternalAction_VerifyOwner;
export declare type IMeteorActionResponse_Output<T> = {
    success: true;
    payload: T;
    message?: string;
    endTags: string[];
} | {
    success: false;
    payload?: undefined;
    message: string;
    endTags: string[];
};
export interface IPostMessageConnection {
    uid: string;
    actionType: EWalletExternalActionType;
    status: EExternalActionConnectionStatus;
    promise: Promise<IMeteorActionResponse_Output<any>>;
    resolve: (output: IMeteorActionResponse_Output<any>) => void;
    reject: (reason: MeteorActionError) => void;
    currentPayload: any;
    endTags: (string | EMeteorActionErrorTag)[];
    inputs: any;
    lastAttemptedConnection: number;
    lastConnection: number;
    network: ENearNetwork;
}
export declare type TPostMessageSend = Pick<IPostMessageConnection, "uid" | "status" | "actionType" | "endTags" | "network"> & {
    tabId?: number;
    inputs?: any;
};
export declare type TClientPostMessageResponse = Pick<IPostMessageConnection, "uid" | "status" | "endTags"> & {
    tabId?: number;
    payload?: any;
};
export {};
