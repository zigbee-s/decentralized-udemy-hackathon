import { Device } from '../../../../../common/types';
import EventEmitter from 'eventemitter3';
import WebSocket from 'isomorphic-ws';
import { transactions } from 'near-api-js';
import { SignedTransaction } from 'near-api-js/lib/transaction';
import { PublicKey } from 'near-api-js/lib/utils';
import { AppRequests, SignTransactionsRequest } from '../types/AppRequest';
import { AppDataMessage, PendingRequestsMessage, ServerMessage, SessionsMessage } from '../types/ServerMessage';
export interface IBuild {
    url?: string;
    sessionId: string;
}
export interface IConnect {
    publicKey: PublicKey;
    sessionId: string;
    accountId: string;
    token?: string;
    notificationEndpoint?: string;
    device?: Device;
}
export interface NightlyClientEvents {
    newRequest(request: AppRequests): void;
    disconnect(): void;
}
export declare class ClientNear extends EventEmitter<NightlyClientEvents> {
    ws: WebSocket;
    events: {
        [key: string]: (data: any) => void;
    };
    sessionId: string;
    private constructor();
    static build: ({ sessionId, url }: IBuild) => Promise<{
        client: ClientNear;
        data: AppDataMessage;
    }>;
    connect: ({ publicKey, sessionId, token, device, accountId, notificationEndpoint }: IConnect) => Promise<void>;
    endSession: () => Promise<void>;
    getSessions: (token: string) => Promise<SessionsMessage>;
    getPendingRequests: () => Promise<PendingRequestsMessage>;
    private send;
    resolveSignTransaction: ({ requestId, signedTransactions }: IResolveSignTransaction) => Promise<ServerMessage>;
    resolveSignMessage: ({ requestId, signature }: IResolveSignMessage) => Promise<ServerMessage>;
    rejectRequest: (requestId: any) => Promise<ServerMessage>;
}
export interface IResolveSignTransaction {
    requestId: string;
    signedTransactions: SignedTransaction[];
}
export interface IResolveSignMessage {
    requestId: string;
    signature: Uint8Array;
}
export interface SignTransactionsRequestDeserialized extends SignTransactionsRequest {
    deserialized: transactions.Transaction[];
}
export declare type EventAppRequests = SignTransactionsRequestDeserialized | AppRequests;
