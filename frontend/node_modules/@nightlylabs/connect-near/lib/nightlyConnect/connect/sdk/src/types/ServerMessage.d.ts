import { NETWORK } from '../../../../../common/types';
import { Version } from './AppMessages';
import { AppRequests } from './AppRequest';
export declare enum ServerMessageTypes {
    InitSuccess = "InitSuccess",
    AppData = "AppData",
    UserConnected = "UserConnected",
    PendingRequests = "PendingRequests",
    SignTransactionResolve = "SignTransactionResolve",
    SignAllTransactionsResolve = "SignAllTransactionsResolve",
    SignMessageResolve = "SignMessageResolve",
    NewRequestMessage = "NewRequestMessage",
    GetSessions = "GetSessions",
    Success = "Success",
    Error = "Error"
}
export interface SignTransactionResolveMessage {
    type: ServerMessageTypes.SignTransactionResolve;
    transaction: string;
    publicKey: string;
    id: string;
}
export interface SignAllTransactionsResolveMessage {
    type: ServerMessageTypes.SignAllTransactionsResolve;
    transactions: string[];
    publicKey: string;
    id: string;
}
export interface SignMessageResolveMessage {
    type: ServerMessageTypes.SignMessageResolve;
    signature: string;
    publicKey: string;
    id: string;
}
export interface PendingRequestsMessage {
    type: ServerMessageTypes.PendingRequests;
    requests: Array<AppRequests>;
    id: string;
}
export interface AppData {
    application: string;
    description: string;
    additional_info: string;
    icon: string;
    network: NETWORK;
    version: Version;
    id: string;
}
export interface SessionsMessage {
    type: ServerMessageTypes.GetSessions;
    sessions: Array<AppData>;
    id: string;
}
export interface InitSuccessMessage {
    type: ServerMessageTypes.InitSuccess;
    sessionId: string;
    id: string;
    createdNew: boolean;
}
export interface ErrorMessage {
    type: ServerMessageTypes.Error;
    msg: string;
    id: string;
}
export interface UserConnectedMessage {
    type: ServerMessageTypes.UserConnected;
    publicKey: string;
    metadata: string | undefined;
    id: string;
}
export interface NewRequestMessage {
    type: ServerMessageTypes.NewRequestMessage;
    request: AppRequests;
}
export interface SuccessMessage {
    type: ServerMessageTypes.Success;
    id: string;
}
export interface AppDataMessage extends AppData {
    type: ServerMessageTypes.AppData;
}
export declare type ServerMessageToApp = InitSuccessMessage | ErrorMessage | UserConnectedMessage | SignTransactionResolveMessage | SignAllTransactionsResolveMessage | SignMessageResolveMessage | SuccessMessage;
export declare type ServerMessage = InitSuccessMessage | ErrorMessage | AppDataMessage | UserConnectedMessage | SignTransactionResolveMessage | SignAllTransactionsResolveMessage | SignMessageResolveMessage | SuccessMessage | NewRequestMessage | PendingRequestsMessage | SessionsMessage;
